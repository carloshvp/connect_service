We will use the strangler pattern to refactor the application from a monolith to micro-services architecture. We will create the next micro-services
1. Location producer -> Kafka -> Location consumer: This decouples all location messages from the rest of REST API calls.
2. Front-end service: This new service provides the UI for the user and uses the next backend services:
2.1 Persons service: This is a new service which was already totally decoupled from the rest of the application. It handles all information related to Persons
2.2 Connection service: This service works with the location data stored in the Database

* Message passing techniques *
1. REST APIs: The Persons service and Connection service keep their original message passing technique, though as 2 separate micro-services. There is no reason to change this given the requirements and we can simply re-use the original code, just distributed in the mentioned 2 micro-services to avoid additional cost and development time.
2. gRPC: This is the type of message passing technique between the Location producer and consumer services. The high amounts of data expected for this use-case justifies the use of a binary format like Protobuf, which is much more efficient than ASCII characters in JSON messages in REST APIs.
3. Kafka: This will be used to decouple the Location producer and consumer services. This decision allows for asynchronous scalability in either side. We don't know yet how many producers will be sending data and how much computing capacity we need in the consumer side. Kafka makes sure we have time to scale independently in either side.
